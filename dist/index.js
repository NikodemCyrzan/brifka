"use strict";var e=require("node:process"),t=require("node:os"),r=require("node:tty"),o=require("node:fs/promises"),n=require("node:path");const i=(e=0)=>t=>`[${t+e}m`,s=(e=0)=>t=>`[${38+e};5;${t}m`,l=(e=0)=>(t,r,o)=>`[${38+e};2;${t};${r};${o}m`,c={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(c.modifier);Object.keys(c.color),Object.keys(c.bgColor);const a=function(){const e=new Map;for(const[t,r]of Object.entries(c)){for(const[t,o]of Object.entries(r))c[t]={open:`[${o[0]}m`,close:`[${o[1]}m`},r[t]=c[t],e.set(o[0],o[1]);Object.defineProperty(c,t,{value:r,enumerable:!1})}return Object.defineProperty(c,"codes",{value:e,enumerable:!1}),c.color.close="[39m",c.bgColor.close="[49m",c.color.ansi=i(),c.color.ansi256=s(),c.color.ansi16m=l(),c.bgColor.ansi=i(10),c.bgColor.ansi256=s(10),c.bgColor.ansi16m=l(10),Object.defineProperties(c,{rgbToAnsi256:{value:(e,t,r)=>e===t&&t===r?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(r/255*5),enumerable:!1},hexToRgb:{value(e){const t=/[a-f\d]{6}|[a-f\d]{3}/i.exec(e.toString(16));if(!t)return[0,0,0];let[r]=t;3===r.length&&(r=[...r].map((e=>e+e)).join(""));const o=Number.parseInt(r,16);return[o>>16&255,o>>8&255,255&o]},enumerable:!1},hexToAnsi256:{value:e=>c.rgbToAnsi256(...c.hexToRgb(e)),enumerable:!1},ansi256ToAnsi:{value(e){if(e<8)return 30+e;if(e<16)return e-8+90;let t,r,o;if(e>=232)t=(10*(e-232)+8)/255,r=t,o=t;else{const n=(e-=16)%36;t=Math.floor(e/36)/5,r=Math.floor(n/6)/5,o=n%6/5}const n=2*Math.max(t,r,o);if(0===n)return 30;let i=30+(Math.round(o)<<2|Math.round(r)<<1|Math.round(t));return 2===n&&(i+=60),i},enumerable:!1},rgbToAnsi:{value:(e,t,r)=>c.ansi256ToAnsi(c.rgbToAnsi256(e,t,r)),enumerable:!1},hexToAnsi:{value:e=>c.ansi256ToAnsi(c.hexToAnsi256(e)),enumerable:!1}}),c}();function d(t,r=(globalThis.Deno?globalThis.Deno.args:e.argv)){const o=t.startsWith("-")?"":1===t.length?"-":"--",n=r.indexOf(o+t),i=r.indexOf("--");return-1!==n&&(-1===i||n<i)}const{env:f}=e;let u;function h(r,{streamIsTTY:o,sniffFlags:n=!0}={}){const i=function(){if("FORCE_COLOR"in f)return"true"===f.FORCE_COLOR?1:"false"===f.FORCE_COLOR?0:0===f.FORCE_COLOR.length?1:Math.min(Number.parseInt(f.FORCE_COLOR,10),3)}();void 0!==i&&(u=i);const s=n?u:i;if(0===s)return 0;if(n){if(d("color=16m")||d("color=full")||d("color=truecolor"))return 3;if(d("color=256"))return 2}if("TF_BUILD"in f&&"AGENT_NAME"in f)return 1;if(r&&!o&&void 0===s)return 0;const l=s||0;if("dumb"===f.TERM)return l;if("win32"===e.platform){const e=t.release().split(".");return Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in f)return"GITHUB_ACTIONS"in f||"GITEA_ACTIONS"in f?3:["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","BUILDKITE","DRONE"].some((e=>e in f))||"codeship"===f.CI_NAME?1:l;if("TEAMCITY_VERSION"in f)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(f.TEAMCITY_VERSION)?1:0;if("truecolor"===f.COLORTERM)return 3;if("xterm-kitty"===f.TERM)return 3;if("TERM_PROGRAM"in f){const e=Number.parseInt((f.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(f.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(f.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(f.TERM)||"COLORTERM"in f?1:l}function m(e,t={}){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(h(e,{streamIsTTY:e&&e.isTTY,...t}))}d("no-color")||d("no-colors")||d("color=false")||d("color=never")?u=0:(d("color")||d("colors")||d("color=true")||d("color=always"))&&(u=1);const g={stdout:m({isTTY:r.isatty(1)}),stderr:m({isTTY:r.isatty(2)})};function p(e,t,r){let o=e.indexOf(t);if(-1===o)return e;const n=t.length;let i=0,s="";do{s+=e.slice(i,o)+t+r,i=o+n,o=e.indexOf(t,i)}while(-1!==o);return s+=e.slice(i),s}const{stdout:b,stderr:y}=g,v=Symbol("GENERATOR"),w=Symbol("STYLER"),O=Symbol("IS_EMPTY"),k=["ansi","ansi","ansi256","ansi16m"],T=Object.create(null),$=e=>{const t=(...e)=>e.join(" ");return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const r=b?b.level:0;e.level=void 0===t.level?r:t.level})(t,e),Object.setPrototypeOf(t,R.prototype),t};function R(e){return $(e)}Object.setPrototypeOf(R.prototype,Function.prototype);for(const[e,t]of Object.entries(a))T[e]={get(){const r=C(this,E(t.open,t.close,this[w]),this[O]);return Object.defineProperty(this,e,{value:r}),r}};T.visible={get(){const e=C(this,this[w],!0);return Object.defineProperty(this,"visible",{value:e}),e}};const A=(e,t,r,...o)=>"rgb"===e?"ansi16m"===t?a[r].ansi16m(...o):"ansi256"===t?a[r].ansi256(a.rgbToAnsi256(...o)):a[r].ansi(a.rgbToAnsi(...o)):"hex"===e?A("rgb",t,r,...a.hexToRgb(...o)):a[r][e](...o),j=["rgb","hex","ansi256"];for(const e of j){T[e]={get(){const{level:t}=this;return function(...r){const o=E(A(e,k[t],"color",...r),a.color.close,this[w]);return C(this,o,this[O])}}};T["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...r){const o=E(A(e,k[t],"bgColor",...r),a.bgColor.close,this[w]);return C(this,o,this[O])}}}}const x=Object.defineProperties((()=>{}),{...T,level:{enumerable:!0,get(){return this[v].level},set(e){this[v].level=e}}}),E=(e,t,r)=>{let o,n;return void 0===r?(o=e,n=t):(o=r.openAll+e,n=t+r.closeAll),{open:e,close:t,openAll:o,closeAll:n,parent:r}},C=(e,t,r)=>{const o=(...e)=>_(o,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(o,x),o[v]=e,o[w]=t,o[O]=r,o},_=(e,t)=>{if(e.level<=0||!t)return e[O]?"":t;let r=e[w];if(void 0===r)return t;const{openAll:o,closeAll:n}=r;if(t.includes(""))for(;void 0!==r;)t=p(t,r.close,r.open),r=r.parent;const i=t.indexOf("\n");return-1!==i&&(t=function(e,t,r,o){let n=0,i="";do{const s="\r"===e[o-1];i+=e.slice(n,s?o-1:o)+t+(s?"\r\n":"\n")+r,n=o+1,o=e.indexOf("\n",n)}while(-1!==o);return i+=e.slice(n),i}(t,n,o,i)),o+t+n};Object.defineProperties(R.prototype,T);const M=R();R({level:y?y.level:0});class B{args;index=0;constructor(e){this.args=e}next(){return!(this.index>=this.args.length)&&this.args[this.index++]}prev(){return!(this.index-1<0)&&this.args[--this.index]}peek(){return!(this.index>=this.args.length)&&this.args[this.index]}}const I=(e,t="")=>{const r=[],o=Math.min(process.stdout.columns,45),n=e.split(" ");r.push(`â•­â•´${t}â•¶${Array(o-5-t.length).fill("â”€").join("")}â”€â•®`);let i=[];for(let e=0;e<n.length;e++)if([...i,n[e]].join(" ").length<o-2)i.push(n[e]);else{const t=i.join(" ");r.push(`â”‚${t}${Array(o-2-t.length).fill(" ").join("")}â”‚`),i=[],e--}return i.length>0&&r.push(`â”‚${i.join(" ")}${Array(o-2-i.join(" ").length).fill(" ").join("")}â”‚`),r.push(`â•°${Array(o-2).fill("â”€").join("")}â•¯`),`\n${r.join("\n")}\n`},F=M.yellow,S=M.blue,N={init:`${S("init")}\n\n\tCreates new brifka repository in current working path.`,track:`${S("track <directory_path> | <file_path> | .")}\n\n\tAdds files to the tracked stage.\n\t${F("<directory_path>")} - all files and directories in that directory will be tracked.\n\t${F("<file_path>")} - file will be tracked.\n\t${F(".")} - all files besides excluded in '.brignore' will be tracked.`,untrack:`${S("untrack <directory_path> | <file_path> | .")}\n\n\tRemoves files from tracked stage.\n\t${F("<directory_path>")} - all files and directories in that directory will be untracked.\n\t${F("<file_path>")} - file will be untracked.\n\t${F(".")} - all files  will be untracked.`,commit:`${S("commit <commit_name>")}\n\n\tAdds new commit to the repository.\n\t${F("<commit_name>")} - name of new commit.`,uncommit:`${S("uncommit")}\n\n\tRemoves last commit from the repository.`,commits:`${S("commits")}\n${S("commits <limit>")}\n\n\tDisplays commits.\n\t${F("<limit>")} - displays only last x commits.`,push:`${S("push")}\n\n\tSends repository to the ftp server specified in 'brifka.config.json'.`,pull:`${S("pull")}\n\n\tDownloads repository from ftp server specified in 'brifka.config.json'.`},L=async(e,t="")=>{const r=n.normalize(e),i=n.parse(r).dir.split(n.sep).filter((e=>e.length>0));e=n.resolve(process.cwd(),r);for(let e=0;e<i.length;e++)try{await o.mkdir(n.resolve(process.cwd(),...i.slice(0,e+1)))}catch{}await o.writeFile(e,t)},P=async(e,t)=>{const r=n.normalize(e),i=n.parse(r).dir.split(n.sep).filter((e=>e.length>0));e=n.resolve(process.cwd(),r);for(let e=0;e<i.length;e++)try{await o.mkdir(n.resolve(process.cwd(),...i.slice(0,e+1)))}catch{}await o.appendFile(e,t)},D=async e=>{e=n.resolve(process.cwd(),e);try{return await o.readFile(e,{encoding:"utf8"})}catch{return!1}},G=async(e,t)=>{const r=await o.readdir(e);for(const i of r)try{const r=n.resolve(e,i),s=await o.stat(r);s.isDirectory()?await G(r,t):s.isFile()&&t.add(n.relative(process.cwd(),r))}catch{}},Y=e=>e.join(t.EOL),q=e=>e.split(t.EOL).filter((e=>e.length>0)),z=async(e,t)=>{const r=await o.readdir(e);for(const i of r)try{const r=n.resolve(e,i),s=await o.stat(r);s.isDirectory()?await z(r,t):s.isFile()&&t.add(n.relative(process.cwd(),r))}catch{}},U=e=>{if(!e.peek())return void console.log(`\n${Object.values(N).join("\n\n")}\n`);const t=e.peek();Object.keys(N).find((e=>e==t))?.length?console.log(`\n${N[t]}\n`):(console.error(M.red(`\nCommand '${t}' doesn't exist.`)),console.log(I("Type 'brifka help' to view documentation of all commands.","Help")))},V=e=>{const t=(...e)=>n.join("./.brifka",...e);L(t("mem/commits")),L(t("mem/tracked")),(async e=>{const t=n.normalize(e),r=n.parse(t),i=[...r.dir.split(n.sep),r.name].filter((e=>e.length>0));for(let e=0;e<i.length;e++)try{await o.mkdir(n.resolve(process.cwd(),...i.slice(0,e+1)))}catch{}})(t("rep")),L("brifka.config.json",JSON.stringify({server:"",port:21,login:"",password:""})),L(".brignore","brifka.config.json")},H=async e=>{const r=e.next();if(!r)return void console.error(M.red("\nTrack command requires <directory_path> | <file_path> | . argument.\n"));const i=".brifka/mem/tracked",s=n.resolve(process.cwd(),r);let l;try{l=await o.stat(s)}catch{return void console.error(M.red(`\nFile or directory '${r}' doesn't exist.\n`))}const c=await D(i);if("string"!=typeof c)return void console.error(M.red("\nRepository memory corrupted :/\n"));const a=new Set(q(c));if(l.isDirectory()){const e=new Set;await z(s,e);const o=new Set(Array.from(e).filter((e=>!a.has(e))));await P(i,Y(Array.from(o))+t.EOL),console.log(`\n${M.green(o.size)} new files added to tracked stage from directory '${r}'.\n`)}else if(l.isFile()){const e=n.relative(process.cwd(),s);if(a.has(e))return void console.error(M.red(`\nFile '${e}' is already tracked.\n`));await P(i,Y([e])+t.EOL),console.log(`\nAdded '${r}' to tracked stage.\n`)}},W=async e=>{const t=e.next();if(!t)return void console.error(M.red("\nUntrack command requires <directory_path> | <file_path> | . argument.\n"));const r=".brifka/mem/tracked",i=await D(r);if("string"!=typeof i)return void console.error(M.red("\nRepository memory corrupted :/\n"));const s=n.normalize(t),l=n.resolve(process.cwd(),s),c=new Set(q(i));let a;try{a=await o.stat(l)}catch{return void console.log(M.red(`\nFile or directory '${t}' doesn't exist.\n`))}if(a.isFile())c.delete(s)?console.log(`\nRemoved '${t}' from tracked stage.\n`):console.log(M.red(`\nFile '${t}' wasn't tracked.\n`));else if(a.isDirectory()){const e=new Set;await G(l,e);let r=0;for(const t of e)c.delete(t)&&r++;console.log(`\n${M.red(r)} files removed from tracked stage from directory '${t}'.\n`)}await L(r,Y(Array.from(c)))};(async()=>{const e=new B(process.argv.slice(2)),t=e.peek();let r=!1;try{if(!(await o.stat(n.resolve(process.cwd(),".brifka"))).isDirectory())throw new Error;r=!0}catch{}if(!r&&(!t||"init"!=t&&"help"!=t))return console.log(M.red("\nBrifka repository is not initialised.")),void console.log(I("Type 'brifka init' to initialise repository.","Help"));(e=>{const t=e.next();switch(t){case"help":U(e);break;case"init":V(e);break;case"track":H(e);break;case"untrack":W(e);break;default:console.error(M.red(`\nCommand '${t}' doesn't exist.`)),console.log(I("To get documentation of all commands type 'brifka help' or 'brifka help <command_name>' to get documentation of specific command.","Help"))}})(e)})();
